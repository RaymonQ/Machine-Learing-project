df_train = pd.read_csv(path_trainingData, sep=',')
df_test = pd.read_csv(path_testData, sep=',')

def label_relevance (row):
   if row['topic'] == 'IRRELEVANT' :
      return '0'
   else:
      return '1'
df_train.apply (lambda row: label_relevance(row), axis=1)
df_train['relevance'] = df_train.apply (lambda row: label_relevance(row), axis=1)
df_test.apply (lambda row: label_relevance(row), axis=1)
df_test['relevance'] = df_test.apply (lambda row: label_relevance(row), axis=1)

X_train = tfidf_custom.fit_transform(df_train['article_words']).toarray()
X_test = tfidf_custom.fit_transform(df_test['article_words']).toarray()
Y_train = df_train['relevance']
Y_test = df_test['relevance']

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train, Y_train)

from sklearn.linear_model import LogisticRegression
logit_model = LogisticRegression()
# Fit
logit_model = logit_model.fit(X_train, Y_train)
# How accurate?
print('Accuracy of logistic regression classifier on training set: {:.2f}'.format(logit_model.score(X_train, Y_train)))

print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logit_model.score(X_test, Y_test)))

prediction = logit_model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(Y_test, prediction))
